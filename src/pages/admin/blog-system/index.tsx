import type { UploadFile, UploadProps } from "antd";

import {
  Button,
  Card,
  Col,
  Form,
  Input,
  Layout,
  message,
  Row,
  Select,
  Space,
  Statistic,
  Tag,
  Typography,
} from "antd";
import { FileUp, Filter, Plus, Search } from "lucide-react";
import { useState } from "react";

import BlogModal from "./BlogModal";
import BlogPreviewDrawer from "./BlogPreviewDrawer";
import BlogTable from "./BlogTable";

// Mock data for blogs
const mockBlogs = [
  {
    id: "1",
    title: "Kh√°m ph√° ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë S√†i G√≤n",
    thumbnail:
      "https://images.unsplash.com/photo-1504674900247-0877df9cc836?w=300&h=200&fit=crop",
    tag: "·∫®m th·ª±c",
    content: `
      <h2>Gi·ªõi thi·ªáu v·ªÅ ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë S√†i G√≤n</h2>
      <p>S√†i G√≤n n·ªïi ti·∫øng v·ªõi n·ªÅn ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë phong ph√∫ v√† ƒëa d·∫°ng. T·ª´ nh·ªØng m√≥n ƒÉn truy·ªÅn th·ªëng nh∆∞ ph·ªü, b√°nh m√¨ ƒë·∫øn c√°c m√≥n ƒÉn v·∫∑t ƒë·ªôc ƒë√°o, th√†nh ph·ªë n√†y lu√¥n mang ƒë·∫øn nh·ªØng tr·∫£i nghi·ªám ·∫©m th·ª±c tuy·ªát v·ªùi.</p>
      
      <h3>Nh·ªØng m√≥n ƒÉn kh√¥ng th·ªÉ b·ªè qua</h3>
      <ul>
        <li><strong>Ph·ªü:</strong> M√≥n ƒÉn qu·ªëc h·ªìn qu·ªëc t√∫y c·ªßa Vi·ªát Nam</li>
        <li><strong>B√°nh m√¨:</strong> S·ª± k·∫øt h·ª£p ho√†n h·∫£o gi·ªØa ƒê√¥ng v√† T√¢y</li>
        <li><strong>B√∫n b√≤ Hu·∫ø:</strong> H∆∞∆°ng v·ªã ƒë·∫≠m ƒë√† t·ª´ c·ªë ƒë√¥</li>
        <li><strong>B√°nh x√®o:</strong> M√≥n ƒÉn d√¢n d√£ nh∆∞ng h·∫•p d·∫´n</li>
      </ul>
      
      <p>M·ªói m√≥n ƒÉn ƒë·ªÅu mang trong m√¨nh m·ªôt c√¢u chuy·ªán ri√™ng, ph·∫£n √°nh vƒÉn h√≥a v√† l·ªãch s·ª≠ c·ªßa v√πng ƒë·∫•t Nam B·ªô.</p>
    `,
    createdAt: "2024-01-15T10:30:00Z",
    updatedAt: "2024-01-20T14:45:00Z",
    status: "published",
    views: 1250,
    likes: 89,
  },
  {
    id: "2",
    title: "Top 10 ƒë·ªãa ƒëi·ªÉm du l·ªãch h·∫•p d·∫´n t·∫°i TP.HCM",
    thumbnail:
      "https://images.unsplash.com/photo-1583417319070-4a69db38a482?w=300&h=200&fit=crop",
    tag: "Du l·ªãch",
    content: `
      <h2>Kh√°m ph√° nh·ªØng ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng</h2>
      <p>Th√†nh ph·ªë H·ªì Ch√≠ Minh kh√¥ng ch·ªâ l√† trung t√¢m kinh t·∫ø m√† c√≤n l√† ƒëi·ªÉm ƒë·∫øn du l·ªãch h·∫•p d·∫´n v·ªõi nhi·ªÅu ƒë·ªãa ƒëi·ªÉm th√∫ v·ªã.</p>
      
      <h3>Danh s√°ch c√°c ƒë·ªãa ƒëi·ªÉm n·ªïi b·∫≠t</h3>
      <ol>
        <li>Ch·ª£ B·∫øn Th√†nh - Bi·ªÉu t∆∞·ª£ng c·ªßa S√†i G√≤n</li>
        <li>Dinh ƒê·ªôc L·∫≠p - Ch·ª©ng t√≠ch l·ªãch s·ª≠</li>
        <li>Nh√† th·ªù ƒê·ª©c B√† - Ki·∫øn tr√∫c Gothic tuy·ªát ƒë·∫πp</li>
        <li>Ph·ªë ƒëi b·ªô Nguy·ªÖn Hu·ªá - Kh√¥ng gian gi·∫£i tr√≠ hi·ªán ƒë·∫°i</li>
        <li>B·∫£o t√†ng Ch·ª©ng t√≠ch Chi·∫øn tranh - B√†i h·ªçc l·ªãch s·ª≠</li>
      </ol>
    `,
    createdAt: "2024-01-10T09:15:00Z",
    updatedAt: "2024-01-18T16:20:00Z",
    status: "published",
    views: 2100,
    likes: 156,
  },
  {
    id: "3",
    title: "H∆∞·ªõng d·∫´n di chuy·ªÉn b·∫±ng xe bu√Ωt t·∫°i S√†i G√≤n",
    thumbnail:
      "https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?w=300&h=200&fit=crop",
    tag: "Giao th√¥ng",
    content: `
      <h2>H·ªá th·ªëng xe bu√Ωt c√¥ng c·ªông S√†i G√≤n</h2>
      <p>Xe bu√Ωt l√† ph∆∞∆°ng ti·ªán giao th√¥ng c√¥ng c·ªông ti·ªán l·ª£i v√† kinh t·∫ø ƒë·ªÉ di chuy·ªÉn trong th√†nh ph·ªë.</p>
      
      <h3>C√°c tuy·∫øn xe bu√Ωt ch√≠nh</h3>
      <p>H·ªá th·ªëng xe bu√Ωt S√†i G√≤n c√≥ h∆°n 100 tuy·∫øn kh√°c nhau, k·∫øt n·ªëi c√°c qu·∫≠n huy·ªán trong th√†nh ph·ªë.</p>
    `,
    createdAt: "2024-01-05T14:20:00Z",
    updatedAt: "2024-01-12T11:30:00Z",
    status: "draft",
    views: 450,
    likes: 23,
  },
];

const tagOptions = [
  { label: "Cuisine", value: "Cuisine", color: "red" },
  { label: "Travel", value: "Travel", color: "blue" },
  { label: "Transportation", value: "Transportation", color: "green" },
  { label: "Culture", value: "Culture", color: "purple" },
  { label: "History", value: "History", color: "orange" },
  { label: "Shopping", value: "Shopping", color: "cyan" },
];

export default function BlogAdminScreen() {
  const [blogs, setBlogs] = useState(mockBlogs);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isPreviewVisible, setIsPreviewVisible] = useState(false);
  const [editingBlog, setEditingBlog] = useState<any>(null);
  const [previewBlog, setPreviewBlog] = useState<any>(null);
  const [form] = Form.useForm();
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [searchText, setSearchText] = useState("");
  const [selectedTag, setSelectedTag] = useState<string | undefined>();
  const [selectedStatus, setSelectedStatus] = useState<string | undefined>();

  const handleCreate = () => {
    setEditingBlog(null);
    setIsModalVisible(true);
    form.resetFields();
    setFileList([]);
  };

  const handleEdit = (blog: any) => {
    setEditingBlog(blog);
    setIsModalVisible(true);
    form.setFieldsValue({
      title: blog.title,
      tag: blog.tag,
      content: blog.content,
    });
    setFileList(
      blog.thumbnail
        ? [
            {
              uid: "-1",
              name: "thumbnail.jpg",
              status: "done",
              url: blog.thumbnail,
            },
          ]
        : [],
    );
  };

  const handleDelete = (id: string) => {
    setBlogs(blogs.filter((blog) => blog.id !== id));
    message.success("X√≥a b√†i vi·∫øt th√†nh c√¥ng!");
  };

  const handlePreview = (blog: any) => {
    setPreviewBlog(blog);
    setIsPreviewVisible(true);
  };

  const handleSubmit = async (values: any) => {
    try {
      const thumbnailUrl = fileList[0]?.url || fileList[0]?.response?.url || "";

      if (editingBlog) {
        // Update existing blog
        const updatedBlogs = blogs.map((blog) =>
          blog.id === editingBlog.id
            ? {
                ...blog,
                ...values,
                thumbnail: thumbnailUrl,
                updatedAt: new Date().toISOString(),
              }
            : blog,
        );

        setBlogs(updatedBlogs);
        message.success("C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!");
      } else {
        // Create new blog
        const newBlog = {
          id: Date.now().toString(),
          ...values,
          thumbnail: thumbnailUrl,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          status: "draft",
          views: 0,
          likes: 0,
        };

        setBlogs([newBlog, ...blogs]);
        message.success("T·∫°o b√†i vi·∫øt th√†nh c√¥ng!");
      }

      setIsModalVisible(false);
      form.resetFields();
      setFileList([]);
    } catch (error) {
      message.error("C√≥ l·ªói x·∫£y ra!");
    }
  };

  const handleUploadChange: UploadProps["onChange"] = ({
    fileList: newFileList,
  }) => {
    setFileList(newFileList);
  };

  const toggleStatus = (blog: any) => {
    const updatedBlogs = blogs.map((b) =>
      b.id === blog.id
        ? {
            ...b,
            status: b.status === "published" ? "draft" : "published",
            updatedAt: new Date().toISOString(),
          }
        : b,
    );

    setBlogs(updatedBlogs);
    message.success(
      `${blog.status === "published" ? "·∫®n" : "Xu·∫•t b·∫£n"} b√†i vi·∫øt th√†nh c√¥ng!`,
    );
  };

  const filteredBlogs = blogs.filter((blog) => {
    const matchesSearch = blog.title
      .toLowerCase()
      .includes(searchText.toLowerCase());
    const matchesTag = !selectedTag || blog.tag === selectedTag;
    const matchesStatus = !selectedStatus || blog.status === selectedStatus;

    return matchesSearch && matchesTag && matchesStatus;
  });

  const totalViews = blogs.reduce((sum, blog) => sum + blog.views, 0);
  const totalLikes = blogs.reduce((sum, blog) => sum + blog.likes, 0);
  const publishedCount = blogs.filter(
    (blog) => blog.status === "published",
  ).length;
  const draftCount = blogs.filter((blog) => blog.status === "draft").length;

  return (
    <Layout className="min-h-screen">
      <Layout.Header className="bg-white shadow-sm border-b">
        <div className="flex justify-between items-center">
          <Typography.Title className="m-0" level={3}>
            Blog Management
          </Typography.Title>
          <Space>
            <Button icon={<FileUp size={16} />}>Export Data</Button>
            <Button
              icon={<Plus size={16} />}
              type="primary"
              onClick={handleCreate}
            >
              Create New Blog
            </Button>
          </Space>
        </div>
      </Layout.Header>

      <Layout.Content className="p-6 bg-gray-50">
        {/* Statistics */}
        <Row className="mb-6" gutter={16}>
          <Col span={6}>
            <Card>
              <Statistic prefix="üìù" title="Total Blogs" value={blogs.length} />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                prefix="‚úÖ"
                title="Published"
                value={publishedCount}
                valueStyle={{ color: "#3f8600" }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                prefix="üìÑ"
                title="Draft"
                value={draftCount}
                valueStyle={{ color: "#cf1322" }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic prefix="üëÅ" title="Total Views" value={totalViews} />
            </Card>
          </Col>
        </Row>

        {/* Filters */}
        <Card className="mb-6">
          <Row gutter={16}>
            <Col span={8}>
              <Input
                allowClear
                placeholder="Search by title..."
                prefix={<Search size={16} />}
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
              />
            </Col>
            <Col span={6}>
              <Select
                allowClear
                placeholder="Filter by tag"
                style={{ width: "100%" }}
                value={selectedTag}
                onChange={setSelectedTag}
              >
                {tagOptions.map((option) => (
                  <Select.Option key={option.value} value={option.value}>
                    <Tag color={option.color}>{option.label}</Tag>
                  </Select.Option>
                ))}
              </Select>
            </Col>
            <Col span={6}>
              <Select
                allowClear
                placeholder="Filter by status"
                style={{ width: "100%" }}
                value={selectedStatus}
                onChange={setSelectedStatus}
              >
                <Select.Option value="published">
                  <Tag color="green">Published</Tag>
                </Select.Option>
                <Select.Option value="draft">
                  <Tag color="orange">Draft</Tag>
                </Select.Option>
              </Select>
            </Col>
            <Col span={4}>
              <Button
                icon={<Filter size={16} />}
                onClick={() => {
                  setSearchText("");
                  setSelectedTag(undefined);
                  setSelectedStatus(undefined);
                }}
              >
                Clear Filters
              </Button>
            </Col>
          </Row>
        </Card>

        {/* Blog Table */}
        <Card>
          <BlogTable
            blogs={filteredBlogs}
            tagOptions={tagOptions}
            onDelete={handleDelete}
            onEdit={handleEdit}
            onPreview={handlePreview}
            onToggleStatus={toggleStatus}
          />
        </Card>

        {/* Create/Edit Modal */}
        <BlogModal
          editingBlog={editingBlog}
          fileList={fileList}
          form={form}
          tagOptions={tagOptions}
          visible={isModalVisible}
          onCancel={() => setIsModalVisible(false)}
          onFinish={handleSubmit}
          onUploadChange={handleUploadChange}
        />

        {/* Preview Drawer */}
        <BlogPreviewDrawer
          blog={previewBlog}
          tagOptions={tagOptions}
          visible={isPreviewVisible}
          onClose={() => setIsPreviewVisible(false)}
        />
      </Layout.Content>
    </Layout>
  );
}
